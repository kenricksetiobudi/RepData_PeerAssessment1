library(datasets)
data(iris)
?iris
names(iris)
mean(iris$Sepal.Length)
rowMeans(iris[,1:4])
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
with(mtcars,tapply(mpg,cyl,mean))
split(mtcars,mtcars$cyl)
mtcars
tapply(mtcars$cyl,mtcars$mpg,mean)
with(mtcars,tapply(mpg,cyl,mean))
debug(ls)
help(debut)
help(debug)
call(ls)
help(ls)
string(ls)
str(ls)
apply(iris[,1:4],"virginica",mean)
apply(iris$Sepal.Length,"virginica",mean)
iris
tapply(Species,Sepal.Length,mean)
tapply(iris$Species,iris$Sepal.Length,mean)
tapply(iris$Species,Sepal.Length,mean)
names(iris)
tapply(iris,Sepal.Length,mean)
tapply(iris,iris$Sepal.Length,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
names(mtcars)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
help(inv)
help(inverse)
??inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("obtaining cached data...")
return(m)
}
data <- x$get()
m <- solve(x)
x$setinv(m)
m
}
B = matrix(c(2,4,3,1), nrow=2, ncol = 2)
makeCacheMatrix(B)
cacheSolve(B)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("obtaining cached data...")
return(m)
}
data <- x$get()
m <- solve(x)
x$setinv(m)
m
}
C = rbind(c(1,-1/4),c(-1/4,1))
m = makeCacheMatrix(C)
m$get()
cacheSolve(C)
cacheSolve(m)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("obtaining cached data...")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinv(m)
m
}
cacheSolve(m)
m = makeCacheMatrix(C)
m$get()
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
readUrl <- "http://biostat.jhsph.edu/~jleek/contact.html"
readUrl <- "http://biostat.jhsph.edu/~jleek/contact.html"
con = url(readUrl)
htmlCode = readLines (con)
close(con)
htmlCode
nchar(htmlCode[10,20,30,100])
nchar(htmlCode[c(10,20,30,100)])
readUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
file <- url(readUrl)
readUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
file <- url(readUrl)
data <- read.fwf(file = file)
readUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
file <- url(readUrl)
file <- url(readUrl, method = "curl")
file <- url(readUrl, method = "libcurl")
data <- read.fwf(file = file)
data <- read.fwf(file = file, widths=c(-1,9,-5, 8,-5, 8, -5, 8))
readUrl <- "http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"
file <- url(readUrl, method = "libcurl")
data <- read.fwf(file = file, widths=c(-1,9,-5, 8,-5, 8, -5, 8))
readUrl <- "http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"
file <- url(readUrl, method = "libcurl")
data <- read.fwf(file = file, widths=c(-1,9,-5, 8,-5, 8, -5, 8))
close(file)
data <- read.fwf(file = file, widths=c(-1,9,-5, 4,4,-5, 4,4, -5, 4,4))
readUrl <- "http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"
file <- url(readUrl, method = "libcurl")
data <- read.fwf(file = file, widths=c(-1,9,-5, 4,4,-5, 4,4, -5, 4,4))
close(file)
data
sum(data$V6)
head(data)
sum(data$V6[5:])
sum(data$V6[5:(len(data$V6)-5)])
sum(data$V6[5:(length(data$V6)-5)])
data <- read.fwf(file = file, widths=c(-1,9,-5, 4,4,-5, 4,4, -5, 4,4), header = FALSE, sep="\t")
readUrl <- "http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"
file <- url(readUrl, method = "libcurl")
data <- read.fwf(file = file, widths=c(-1,9,-5, 4,4,-5, 4,4, -5, 4,4), header = FALSE, sep="\t")
close(file)
install.packages(knitr)
install.packages('knitr')
install.packages('slidify')
require(devtools)
install_github("slidify","ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
author("Kenrick Setiobudi")
install.packages('devtools')
require(devtools)
install_github("slidify","ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
library(datasets)
setwd("~/Documents/Dropbox/GitHub/RepData_PeerAssessment1")
if(!file.exists("./data")){dir.create("./data")}
fileUrl<-"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl, destfile = "./data/Dataset.zip",method="curl")
unzip(zipfile = "./data/Dataset.zip", exdir="./data")
datapath <- file.path("./data", "activity")
files <- list.files(datapath, recursive = T)
files
data <- read.csv(file.path(datapath), "activity.csv", header = T)
head(data)
setwd("~/Documents/Dropbox/GitHub/RepData_PeerAssessment1")
if(!file.exists("./data")){dir.create("./data")}
fileUrl<-"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl, destfile = "./data/Dataset.zip",method="curl")
unzip(zipfile = "./data/Dataset.zip", exdir="./data")
datapath <- file.path("./data")
files <- list.files(datapath, recursive = T)
files
```
Then, we load the data into the working directory and changing the data type:
```{r readdata, echo=TRUE}
data <- read.csv(file.path(datapath, "activity.csv"), header = T)
data$date <- as.Date(data$date, format="%Y-%m-%d")
head(data)
str(data)
```
### What is mean total number of steps taken per day?
We will use the package `dplyr` to do the summary:
```{r dplyr, echo=TRUE}
install.packages("dplyr")
library(dplyr)
browseVignettes(package = "dplyr")
data
names(data)
setwd("~/Documents/Dropbox/GitHub/RepData_PeerAssessment1")
if(!file.exists("./data")){
dir.create("./data")
}
fileUrl<-"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl, destfile = "./data/Dataset.zip",method="curl")
unzip(zipfile = "./data/Dataset.zip", exdir="./data")
datapath <- file.path("./data")
files <- list.files(datapath, recursive = T)
files
data <- read.csv(file.path(datapath, "activity.csv"), header = T)
data$date <- as.Date(data$date, format="%Y-%m-%d")
head(data)
str(data)
```
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("ggplot2")
summarize(totalsteps = sum(steps,na.rm=T), meansteps = mean(steps,na.rm=T))
data <- read.csv(file.path(datapath, "activity.csv"), header = T)
summarize(totalsteps = sum(steps,na.rm=T), meansteps = mean(steps,na.rm=T))
library(dplyr)
summarize(totalsteps = sum(steps,na.rm=T), meansteps = mean(steps,na.rm=T))
summarize(data, totalsteps = sum(steps,na.rm=T), meansteps = mean(steps,na.rm=T))
library(dplyr)
library(ggplot2)
install.packages("ggplot")
install.packages("ggplot2")
install.packages("ggplot2")
meantotalinterval <- data %>% group_by(interval) %>% summarise(meansteps = mean(steps, na.rm=T), totalsteps = sum(steps, na.rm=T))
library(dplyr)
meantotalinterval <- data %>% group_by(interval) %>% summarise(meansteps = mean(steps, na.rm=T), totalsteps = sum(steps, na.rm=T))
meantotalinterval
5==meantotalinterval$interval
[5==meantotalinterval$interval]
is.true(5==meantotalinterval$interval)
meantotalinterval[5==meantotalinterval$interval, "meansteps"]
}
cleandata <- data
for (i in 1:nrow(data)){
if (is.na(data$steps[i])){
cleandata$steps[i] <- meantotalinterval[data$interval[i] == meantotalinterval$interval, "totalsteps"]
}
}
head(cleandata)
cleandata
nrow(data) == nrow(cleandata)
cleansummary <- cleandata %>% group_by(date) %>% summarise(totalsteps = sum(steps, na.rm=T))
cleansummary <- cleandata %>% group_by(date) %>% summarise(totalsteps = sum(steps))
length(cleandata)
dim(cleandata)
source('~/.active-rstudio-document', echo=TRUE)
cleansummary <- group_by(cleandata,date)
cleansummary
str(cleandata)
cleandata <- data
for (i in 1:nrow(data)){
if (is.na(data$steps[i])){
value <-subset(meantotalinterval, interval == cleandata$interval[i])
cleandata$steps[i]<value$meansteps
}
}
head(cleandata)
cleandata <- data
for (i in 1:nrow(data)){
if (is.na(cleandata$steps[i])){
index <- cleandata$interval[i]
value<-subset(meantotalinterval,interval==index)
cleandata$steps[i]<-value$meansteps
}
}
head(cleandata)
str(cleandata)
``` {r summarycomparison, echo=TRUE}
cleansummary <- cleandata %>% group_by(date) %>% summarise(totalsteps = sum(steps, na.rm=T))
summary(meantotalsteps$totalsteps)
sd(meantotalsteps$totalsteps, na.rm=T)
summary(cleansummary$totalsteps)
sd(cleansummary$totalsteps, na.rm=T)
cleansummary$daytype <- c("weekday")
head(cleansummary)
cleansummary_weektype <- cleandata %>% group_by(interval) %>% group_by(daytype) %>% summarise (totalsteps = sum(steps, na.rm = T), meansteps = mean(steps, na.rm=T))
cleandata$daytype <- c("weekday")
cleandata[weekdays(as.Date(cleandata[,2])) %in% c("Saturday", "saturday", "Sunday", "sunday"),][4] <- c("weekend")
table(cleandata$daytype)
cleandata$daytype <- factor(cleandata$daytype)
cleansummary_weektype <- cleandata %>% group_by(interval) %>% group_by(daytype) %>% summarise (totalsteps = sum(steps, na.rm = T), meansteps = mean(steps, na.rm=T))
head(cleansummary_weektype)
cleansummary_weektype <- cleandata %>% group_by(interval) %>% summarise (totalsteps = sum(steps, na.rm = T), meansteps = mean(steps, na.rm=T))
head(cleansummary_weektype)
cleansummary_weektype
cleandata %>% filter(daytype = "weekday")
cleandata$daytype <- c("weekday")
cleandata %>% filter(daytype = "weekday")
cleandata[weekdays(as.Date(cleandata[,2])) %in% c("Saturday", "saturday", "Sunday", "sunday"),][4] <- c("weekend")
table(cleandata$daytype)
cleandata$daytype <- factor(cleandata$daytype)
cleansummary_weekday <- cleandata %>% filter(daytype == "weekday") %>%  group_by(interval) %>% summarise (totalsteps = sum(steps, na.rm = T), meansteps = mean(steps, na.rm=T))
cleansummary_weekend <- cleandata %>% filter(daytype == "weekend") %>%  group_by(interval) %>% summarise (totalsteps = sum(steps, na.rm = T), meansteps = mean(steps, na.rm=T))
head(cleansummary_weekday)
head(cleansummary_weekend)
cleansummary_daytype <- rbind(cleansummary_weekday,cleansummary_weekend)
xyplot(meansteps ~ interval | daytype, data = cleansummary_daytype, layout = c(1,2), type = "l", ylab = "Number of steps")
library(lattice)
xyplot(meansteps ~ interval | daytype, data = cleansummary_daytype, layout = c(1,2), type = "l", ylab = "Number of steps")
head(cleansummary_daytype)
head(cleansummary_weekday)
cleansummary_weekday <- cleandata %>% filter(daytype == "weekday") %>%  group_by(interval) %>% summarise (totalsteps = sum(steps, na.rm = T), meansteps = mean(steps, na.rm=T))
cleansummary_weekday$daytype <- "weekday"
cleansummary_weekend <- cleandata %>% filter(daytype == "weekend") %>%  group_by(interval) %>% summarise (totalsteps = sum(steps, na.rm = T), meansteps = mean(steps, na.rm=T))
cleansummary_weekday$daytype <- "weekend"
head(cleansummary_weekday)
head(cleansummary_weekend)
cleansummary_daytype <- rbind(cleansummary_weekday,cleansummary_weekend)
